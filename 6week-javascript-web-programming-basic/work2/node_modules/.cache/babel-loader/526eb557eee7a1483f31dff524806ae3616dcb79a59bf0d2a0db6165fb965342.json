{"ast":null,"code":"var _jsxFileName = \"/Users/kimjunhyung/Desktop/javascript_basic/6week-javascript-web-programming-basic/src/index.js\";\n// import { func } from 'prop-types';\n// import { Fragment } from 'react';\n// import ReactDOM from 'react-dom/client';\n\n// //ReactDOM 의 render은 index.js에서 주로 한번만 실행되기때문에 외울핋요는 없고 알아만두자\n// //ReactDOM.render은 첫번쨰 아규먼트로 html요소를 만들고, 두번쨰 아규먼트값에 그 요소를 넣어주는 역할을 한다.\n// // ReactDOM.render(<h1>안녕 리액트!</h1>, document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//     <h1>안녕 리액트!</h1>,\n//     <p>안녕 리액트!</p>,\n//     <div>안녕 리액트!</div>,\n//     <p id=\"ptagId\">안녕 리액트!</p>,\n//     <p className=\"ptagClassName\">안녕 리액트!</p>,\n//     <form>\n//         <label htmlFor=\"name\">이름</label>\n//         <input id=\"name\" type=\"text\" onBlur=\"\" onFocus=\"\" onMouseDown=\"\" />\n//     </form>,\n\n//     // 한번에 어려개 두려면 div로 묶거나 div스기싫으면 fragment태그를 쓰자.\n//     <div>\n//         <p>안녕</p>\n//         <p>리액트</p>\n//     </div>,\n//     <Fragment>\n//         <p>안녕</p>\n//         <p>리액트</p>\n//     </Fragment>,\n//     // 아래와같이 아무것도 없는 태그로 감싸주는것도 하나의 방법\n//     <>\n//     </>    \n// );\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINS = {\n  rock: 'scissor',\n  scissor: 'paper',\n  paper: 'rock'\n};\nfunction getResult(left, right) {\n  if (WINS[left] === right) return '승리';else if (left === WINS[right]) return '패배';\n  return '무승부';\n}\nfunction handleClick() {\n  console.log('가위바위보!');\n}\nconst me = 'rock';\nconst other = 'scissor';\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"\\uAC00\\uC704\\uBC14\\uC704\\uBCF4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: getResult(me, other)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: \"\\uAC00\\uC704\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: \"\\uBC14\\uC704\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: \"\\uBCF4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this)]\n}, void 0, true), document.getElementById('root'));","map":{"version":3,"names":["ReactDOM","jsxDEV","_jsxDEV","Fragment","_Fragment","WINS","rock","scissor","paper","getResult","left","right","handleClick","console","log","me","other","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","document","getElementById"],"sources":["/Users/kimjunhyung/Desktop/javascript_basic/6week-javascript-web-programming-basic/src/index.js"],"sourcesContent":["// import { func } from 'prop-types';\n// import { Fragment } from 'react';\n// import ReactDOM from 'react-dom/client';\n\n\n// //ReactDOM 의 render은 index.js에서 주로 한번만 실행되기때문에 외울핋요는 없고 알아만두자\n// //ReactDOM.render은 첫번쨰 아규먼트로 html요소를 만들고, 두번쨰 아규먼트값에 그 요소를 넣어주는 역할을 한다.\n// // ReactDOM.render(<h1>안녕 리액트!</h1>, document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//     <h1>안녕 리액트!</h1>,\n//     <p>안녕 리액트!</p>,\n//     <div>안녕 리액트!</div>,\n//     <p id=\"ptagId\">안녕 리액트!</p>,\n//     <p className=\"ptagClassName\">안녕 리액트!</p>,\n//     <form>\n//         <label htmlFor=\"name\">이름</label>\n//         <input id=\"name\" type=\"text\" onBlur=\"\" onFocus=\"\" onMouseDown=\"\" />\n//     </form>,\n    \n//     // 한번에 어려개 두려면 div로 묶거나 div스기싫으면 fragment태그를 쓰자.\n//     <div>\n//         <p>안녕</p>\n//         <p>리액트</p>\n//     </div>,\n//     <Fragment>\n//         <p>안녕</p>\n//         <p>리액트</p>\n//     </Fragment>,\n//     // 아래와같이 아무것도 없는 태그로 감싸주는것도 하나의 방법\n//     <>\n//     </>    \n// );\nimport ReactDOM from 'react-dom';\n\nconst WINS = {\n  rock: 'scissor',\n  scissor: 'paper',\n  paper: 'rock',\n};\n\nfunction getResult(left, right) {\n  if (WINS[left] === right) return '승리';\n  else if (left === WINS[right]) return '패배';\n  return '무승부';\n}\n\nfunction handleClick() {\n  console.log('가위바위보!');\n}\n\nconst me = 'rock';\nconst other = 'scissor';\n\nReactDOM.render(\n  <>\n    <h1>가위바위보</h1>\n    <h2>{getResult(me, other)}</h2>\n    <button onClick={handleClick}>가위</button>\n    <button onClick={handleClick}>바위</button>\n    <button onClick={handleClick}>보</button>\n  </>,\n  document.getElementById('root')\n);\n"],"mappings":";AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,IAAI,GAAG;EACXC,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,OAAO;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,SAASC,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC9B,IAAIN,IAAI,CAACK,IAAI,CAAC,KAAKC,KAAK,EAAE,OAAO,IAAI,CAAC,KACjC,IAAID,IAAI,KAAKL,IAAI,CAACM,KAAK,CAAC,EAAE,OAAO,IAAI;EAC1C,OAAO,KAAK;AACd;AAEA,SAASC,WAAWA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;AACvB;AAEA,MAAMC,EAAE,GAAG,MAAM;AACjB,MAAMC,KAAK,GAAG,SAAS;AAEvBhB,QAAQ,CAACiB,MAAM,eACbf,OAAA,CAAAE,SAAA;EAAAc,QAAA,gBACEhB,OAAA;IAAAgB,QAAA,EAAI;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACdpB,OAAA;IAAAgB,QAAA,EAAKT,SAAS,CAACM,EAAE,EAAEC,KAAK;EAAC;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eAC/BpB,OAAA;IAAQqB,OAAO,EAAEX,WAAY;IAAAM,QAAA,EAAC;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC,eACzCpB,OAAA;IAAQqB,OAAO,EAAEX,WAAY;IAAAM,QAAA,EAAC;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC,eACzCpB,OAAA;IAAQqB,OAAO,EAAEX,WAAY;IAAAM,QAAA,EAAC;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eACxC,CAAC,EACHE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}