Next.js에서의 프록시 설정
개요
개발 과정에서 프론트엔드와 백엔드 간의 API 통신 중 CORS(Cross-Origin Resource Sharing) 오류가 발생하는 경우가 있습니다. 이를 해결하기 위해 프록시 설정을 통해 백엔드와의 통신을 우회할 수 있습니다. React에서는 프록시를 설정하는 방법이 있지만, Next.js에서는 조금 다른 방식으로 설정해야 합니다.

프록시를 사용하여 Next.js 서버 앞에 다른 서버를 두는 것은 일반적인 시나리오입니다. 이를 위해 주로 http-proxy-middleware와 같은 패키지를 사용합니다. 아래는 간단한 예시 코드입니다.

먼저, http-proxy-middleware 패키지를 설치합니다:

Copy code
npm install http-proxy-middleware

Next.js Rewrites
Next.js에서는 rewrites 기능을 통해 프록시 기능을 구현할 수 있습니다. 이 기능은 대상 경로를 마스킹하여 사용자가 사이트에서 자신의 위치를 변경하지 않은 것처럼 보이게 합니다.

source: 들어오는 요청 경로 패턴
destination: 라우팅하려는 경로
활용
next.config.js 파일을 사용하여 프록시 설정을 할 수 있습니다.

javascript
Copy code
const nextConfig = {
  async rewrites() {
    return [
      {
        source: "/api/v2/:path*/",
        destination: `통신하고자 하는 API URL/:path*/`
      },
    ];
  },
  trailingSlash: true,
};

module.exports = withBundleAnalyzer(nextConfig);
axiosSetting.ts와 같은 파일에서 Axios를 사용하여 프록시된 API와 통신할 수 있습니다.

typescript
Copy code
import axios from "axios";
import Cookies from "js-cookie";

export const instance = axios.create({
  baseURL: "/api/v2/",
  headers: {
    "X-CSRFToken": Cookies.get("csrftoken") || "",
  },
  withCredentials: true,
});

export const postLogin = (loginInform: any) =>
  instance.post(`/oauth/login/`, loginInform).then((res) => res.data);
주의사항 (trailingSlash)
Next.js에서는 기본적으로 URL을 후행 슬래시가 없는 URL로 리디렉션합니다. 따라서 후행 슬래시가 있는 API URI를 사용하는 경우 문제가 발생할 수 있습니다. 이를 해결하기 위해 trailingSlash 옵션을 true로 설정할 수 있습니다.

javascript
Copy code
const nextConfig = {
  async rewrites() {
    return [
      {
        source: "/api/v2/:path*/",
        destination: `${process.env.NEXT_PUBLIC_DEV_BASE_URL}/:path*/`
      },
    ];
  },
  trailingSlash: true,
};
결과
프록시를 사용하여 API 요청을 보낼 경우, 로컬 도메인으로부터 세션 ID를 받아올 수 있습니다.